{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e978c12-ad5c-4b99-b241-cd9a381b47ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "#oops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7d966df-ad1a-429d-9206-4e127579b5da",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1, Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed\n",
    "#and average_of_vehicle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4588fdc9-36d3-4a56-a7fd-3c88163aed5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vehicle Name: Car, Max Speed: 180 km/h, Average: 15 km/l\n"
     ]
    }
   ],
   "source": [
    "class Vehicle:\n",
    "    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "\n",
    "# Example usage\n",
    "car = Vehicle(\"Car\", 180, 15)\n",
    "print(f\"Vehicle Name: {car.name_of_vehicle}, Max Speed: {car.max_speed} km/h, Average: {car.average_of_vehicle} km/l\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b4a7857-8f30-4621-b2df-56a2fcfa32b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.\n",
    "#Create a method named seating_capacity which takes capacity as an argument and returns the name of\n",
    "#the vehicle and its seating capacity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "015bc056-b075-423c-8042-f4d9770dea37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the car has seating capacity of3.\n"
     ]
    }
   ],
   "source": [
    "class vehicle:\n",
    "    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed =max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "        \n",
    "class car(vehicle):\n",
    "    def seating_capcity(self,capacity):\n",
    "        return f\"the { self.name_of_vehicle} has seating capacity of{capacity}.\"\n",
    "    \n",
    "#example usage \n",
    "car = car(\"car\",180,14)\n",
    "print(car.seating_capcity(3))\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2663d9dc-0ceb-49e1-9226-8d6282bafbd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c23dbc29-763e-479b-9a5b-799164a18007",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Multiple inheritance is a feature of object-oriented programming languages where a class can inherit attributes and methods from more than one parent class. This allows the derived class to have the combined behavior and attributes of all its parent classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "610a9238-314a-4513-9a10-da98370cfb86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The V8 engine is starting.\n",
      "The vehicle has 4 wheels.\n",
      "Sedan has a V8 engine and 4 wheels.\n"
     ]
    }
   ],
   "source": [
    "# base class1\n",
    "class engine:\n",
    "    def __init__(self,engine_type):\n",
    "        self.engine_type = engine_type\n",
    "        \n",
    "    def start_engine(self):\n",
    "        return f\"the{self.engine_type} engine is starting.\"\n",
    "#base2\n",
    "class wheel: \n",
    "    def __init__(self,num_wheels):\n",
    "        self.num_wheels =  num_wheels \n",
    "    \n",
    "    def wheel_info(self):\n",
    "        return f\"the vehicle has {self.num_wheels} wheels.\"\n",
    "\n",
    "#derived class with multiple inheritance\n",
    "\n",
    "class car(Engine,Wheels):\n",
    "    def        __init__(self,name, Engine_type,num_Wheels):\n",
    "            Engine.__init__(self, Engine_type)\n",
    "            Wheels.__init__(self,num_Wheels)\n",
    "            self.name = name\n",
    "            \n",
    "    def  car_info(self):\n",
    "          return f\"{self.name} has a {self.engine_type} engine and {self.num_wheels} wheel.\"\n",
    "#example usage\n",
    "mu_car = car(\"sedan\",\"v8\", 4 )\n",
    "print(my_car.start_engine())\n",
    "print(my_car.wheel_info())\n",
    "print(my_car.car_info())\n",
    "          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "fe77f705-8a5a-4ca5-81ad-4e51bbfab5c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4. What are getter and setter in python? Create a class and create a getter and a setter method in this\n",
    "#class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "6774d1e4-064d-4c83-b052-eaae4d9c34cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getters and setters are methods used to access and modify the private attributes of a class in Python. They provide a way to enforce encapsulation, allowing controlled access to an object's attributes.\n",
    "\n",
    "#A getter method retrieves the value of an attribute, while a setter method sets or updates the value of an attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "34147999-3733-4f1e-8de8-680c5303c8d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "John\n",
      "30\n",
      "Jane\n",
      "25\n",
      "Name cannot be empty.\n",
      "Age cannot be negative.\n"
     ]
    }
   ],
   "source": [
    "class Person:\n",
    "    def __init__(self, name, age):\n",
    "        self._name = name\n",
    "        self._age = age\n",
    "\n",
    "    # Getter method for name\n",
    "    @property\n",
    "    def name(self):\n",
    "        return self._name\n",
    "\n",
    "    # Setter method for name\n",
    "    @name.setter\n",
    "    def name(self, value):\n",
    "        if not value:\n",
    "            raise ValueError(\"Name cannot be empty.\")\n",
    "        self._name = value\n",
    "\n",
    "    # Getter method for age\n",
    "    @property\n",
    "    def age(self):\n",
    "        return self._age\n",
    "\n",
    "    # Setter method for age\n",
    "    def set_age(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Age cannot be negative.\")\n",
    "        self._age = value\n",
    "\n",
    "    # Setter method for age using property decorator\n",
    "    @age.setter\n",
    "    def age(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Age cannot be negative.\")\n",
    "        self._age = value\n",
    "\n",
    "# Example usage\n",
    "person = Person(\"John\", 30)\n",
    "\n",
    "# Using getter methods\n",
    "print(person.name)  # Output: John\n",
    "print(person.age)   # Output: 30\n",
    "\n",
    "# Using setter methods\n",
    "person.name = \"Jane\"\n",
    "person.age = 25\n",
    "\n",
    "print(person.name)  # Output: Jane\n",
    "print(person.age)   # Output: 25\n",
    "\n",
    "# Trying to set invalid values\n",
    "try:\n",
    "    person.name = \"\"\n",
    "except ValueError as e:\n",
    "    print(e)  # Output: Name cannot be empty.\n",
    "\n",
    "try:\n",
    "    person.age = -5\n",
    "except ValueError as e:\n",
    "    print(e)  # Output: Age cannot be negative.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1d6b7c7-4b55-4b46-b598-9a9c13654061",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q5.What is method overriding in python? Write a python code to demonstrate method overriding."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
